////////////////////////////////////////
// LUT.comp
// computes the LUT for CLAHE
////////////////////////////////////////

#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;	// 64 threads

// stores the min/max value for the volume 
layout(std430, binding = 1) buffer minMaxBuffer {
	uint[2] minMaxData;
};

// output LUT texture
layout(std430, binding = 2) buffer lutBuffer {
    uint LUT[];
};

//uniform float NUM_OUT_BINS;
uniform uint NUM_OUT_BINS;


void main() {
	
	uint index = gl_GlobalInvocationID.x;

	uint globalMin = minMaxData[0];
	uint globalMax = minMaxData[1];
	
	// calculate the size of the bins
	uint binSize = 1 + uint((globalMax - globalMin) / NUM_OUT_BINS);

	// build up the LUT
	if (index >= globalMin || index <= globalMax) {
		// LUT     =       (i - min)       / binSize
		LUT[index] = ( index - globalMin ) / binSize;
	}
}