// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/skeletonframe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RemoteKinect {

namespace {

const ::google::protobuf::Descriptor* SkeletonFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkeletonFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fskeletonframe_2eproto() {
  protobuf_AddDesc_protocol_2fskeletonframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/skeletonframe.proto");
  GOOGLE_CHECK(file != NULL);
  SkeletonFrame_descriptor_ = file->message_type(0);
  static const int SkeletonFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkeletonFrame, source_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkeletonFrame, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkeletonFrame, skeletons_),
  };
  SkeletonFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkeletonFrame_descriptor_,
      SkeletonFrame::default_instance_,
      SkeletonFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkeletonFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkeletonFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkeletonFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fskeletonframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkeletonFrame_descriptor_, &SkeletonFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fskeletonframe_2eproto() {
  delete SkeletonFrame::default_instance_;
  delete SkeletonFrame_reflection_;
}

void protobuf_AddDesc_protocol_2fskeletonframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RemoteKinect::protobuf_AddDesc_protocol_2fskeleton_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034protocol/skeletonframe.proto\022\014RemoteKi"
    "nect\032\027protocol/skeleton.proto\"_\n\rSkeleto"
    "nFrame\022\025\n\rsource_serial\030\001 \002(\t\022\014\n\004tick\030\002 "
    "\002(\r\022)\n\tskeletons\030\003 \003(\0132\026.RemoteKinect.Sk"
    "eleton", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/skeletonframe.proto", &protobuf_RegisterTypes);
  SkeletonFrame::default_instance_ = new SkeletonFrame();
  SkeletonFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fskeletonframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fskeletonframe_2eproto {
  StaticDescriptorInitializer_protocol_2fskeletonframe_2eproto() {
    protobuf_AddDesc_protocol_2fskeletonframe_2eproto();
  }
} static_descriptor_initializer_protocol_2fskeletonframe_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SkeletonFrame::kSourceSerialFieldNumber;
const int SkeletonFrame::kTickFieldNumber;
const int SkeletonFrame::kSkeletonsFieldNumber;
#endif  // !_MSC_VER

SkeletonFrame::SkeletonFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkeletonFrame::InitAsDefaultInstance() {
}

SkeletonFrame::SkeletonFrame(const SkeletonFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkeletonFrame::SharedCtor() {
  _cached_size_ = 0;
  source_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkeletonFrame::~SkeletonFrame() {
  SharedDtor();
}

void SkeletonFrame::SharedDtor() {
  if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete source_serial_;
  }
  if (this != default_instance_) {
  }
}

void SkeletonFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkeletonFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkeletonFrame_descriptor_;
}

const SkeletonFrame& SkeletonFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fskeletonframe_2eproto();  return *default_instance_;
}

SkeletonFrame* SkeletonFrame::default_instance_ = NULL;

SkeletonFrame* SkeletonFrame::New() const {
  return new SkeletonFrame;
}

void SkeletonFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source_serial()) {
      if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
        source_serial_->clear();
      }
    }
    tick_ = 0u;
  }
  skeletons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkeletonFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source_serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_serial().data(), this->source_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }
      
      // required uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skeletons;
        break;
      }
      
      // repeated .RemoteKinect.Skeleton skeletons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skeletons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skeletons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skeletons;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkeletonFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string source_serial = 1;
  if (has_source_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_serial().data(), this->source_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source_serial(), output);
  }
  
  // required uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }
  
  // repeated .RemoteKinect.Skeleton skeletons = 3;
  for (int i = 0; i < this->skeletons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skeletons(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkeletonFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string source_serial = 1;
  if (has_source_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_serial().data(), this->source_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_serial(), target);
  }
  
  // required uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }
  
  // repeated .RemoteKinect.Skeleton skeletons = 3;
  for (int i = 0; i < this->skeletons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skeletons(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkeletonFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source_serial = 1;
    if (has_source_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_serial());
    }
    
    // required uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }
    
  }
  // repeated .RemoteKinect.Skeleton skeletons = 3;
  total_size += 1 * this->skeletons_size();
  for (int i = 0; i < this->skeletons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkeletonFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkeletonFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkeletonFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkeletonFrame::MergeFrom(const SkeletonFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  skeletons_.MergeFrom(from.skeletons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_serial()) {
      set_source_serial(from.source_serial());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkeletonFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkeletonFrame::CopyFrom(const SkeletonFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkeletonFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < skeletons_size(); i++) {
    if (!this->skeletons(i).IsInitialized()) return false;
  }
  return true;
}

void SkeletonFrame::Swap(SkeletonFrame* other) {
  if (other != this) {
    std::swap(source_serial_, other->source_serial_);
    std::swap(tick_, other->tick_);
    skeletons_.Swap(&other->skeletons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkeletonFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkeletonFrame_descriptor_;
  metadata.reflection = SkeletonFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemoteKinect

// @@protoc_insertion_point(global_scope)
