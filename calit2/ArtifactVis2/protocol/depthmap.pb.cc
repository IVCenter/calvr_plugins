// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/depthmap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RemoteKinect {

namespace {

const ::google::protobuf::Descriptor* DepthMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fdepthmap_2eproto() {
  protobuf_AddDesc_protocol_2fdepthmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/depthmap.proto");
  GOOGLE_CHECK(file != NULL);
  DepthMap_descriptor_ = file->message_type(0);
  static const int DepthMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, source_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, depths_),
  };
  DepthMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepthMap_descriptor_,
      DepthMap::default_instance_,
      DepthMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepthMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fdepthmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepthMap_descriptor_, &DepthMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fdepthmap_2eproto() {
  delete DepthMap::default_instance_;
  delete DepthMap_reflection_;
}

void protobuf_AddDesc_protocol_2fdepthmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027protocol/depthmap.proto\022\014RemoteKinect\""
    "u\n\010DepthMap\022\025\n\rsource_serial\030\001 \002(\t\022\014\n\004ti"
    "ck\030\002 \002(\r\022\r\n\005width\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\022"
    "\021\n\tmax_range\030\005 \002(\005\022\022\n\006depths\030\006 \003(\005B\002\020\001", 158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/depthmap.proto", &protobuf_RegisterTypes);
  DepthMap::default_instance_ = new DepthMap();
  DepthMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fdepthmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fdepthmap_2eproto {
  StaticDescriptorInitializer_protocol_2fdepthmap_2eproto() {
    protobuf_AddDesc_protocol_2fdepthmap_2eproto();
  }
} static_descriptor_initializer_protocol_2fdepthmap_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DepthMap::kSourceSerialFieldNumber;
const int DepthMap::kTickFieldNumber;
const int DepthMap::kWidthFieldNumber;
const int DepthMap::kHeightFieldNumber;
const int DepthMap::kMaxRangeFieldNumber;
const int DepthMap::kDepthsFieldNumber;
#endif  // !_MSC_VER

DepthMap::DepthMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepthMap::InitAsDefaultInstance() {
}

DepthMap::DepthMap(const DepthMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepthMap::SharedCtor() {
  _cached_size_ = 0;
  source_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  width_ = 0;
  height_ = 0;
  max_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthMap::~DepthMap() {
  SharedDtor();
}

void DepthMap::SharedDtor() {
  if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete source_serial_;
  }
  if (this != default_instance_) {
  }
}

void DepthMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthMap_descriptor_;
}

const DepthMap& DepthMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fdepthmap_2eproto();  return *default_instance_;
}

DepthMap* DepthMap::default_instance_ = NULL;

DepthMap* DepthMap::New() const {
  return new DepthMap;
}

void DepthMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source_serial()) {
      if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
        source_serial_->clear();
      }
    }
    tick_ = 0u;
    width_ = 0;
    height_ = 0;
    max_range_ = 0;
  }
  depths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepthMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source_serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_serial().data(), this->source_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }
      
      // required uint32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }
      
      // required int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }
      
      // required int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_range;
        break;
      }
      
      // required int32 max_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_range_)));
          set_has_max_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_depths;
        break;
      }
      
      // repeated int32 depths = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_depths())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_depths())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepthMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string source_serial = 1;
  if (has_source_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_serial().data(), this->source_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source_serial(), output);
  }
  
  // required uint32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick(), output);
  }
  
  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }
  
  // required int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }
  
  // required int32 max_range = 5;
  if (has_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_range(), output);
  }
  
  // repeated int32 depths = 6 [packed = true];
  if (this->depths_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_depths_cached_byte_size_);
  }
  for (int i = 0; i < this->depths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->depths(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepthMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string source_serial = 1;
  if (has_source_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_serial().data(), this->source_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_serial(), target);
  }
  
  // required uint32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick(), target);
  }
  
  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }
  
  // required int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }
  
  // required int32 max_range = 5;
  if (has_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_range(), target);
  }
  
  // repeated int32 depths = 6 [packed = true];
  if (this->depths_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _depths_cached_byte_size_, target);
  }
  for (int i = 0; i < this->depths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->depths(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepthMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source_serial = 1;
    if (has_source_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_serial());
    }
    
    // required uint32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }
    
    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required int32 max_range = 5;
    if (has_max_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_range());
    }
    
  }
  // repeated int32 depths = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->depths_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->depths(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _depths_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepthMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthMap::MergeFrom(const DepthMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  depths_.MergeFrom(from.depths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_serial()) {
      set_source_serial(from.source_serial());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_max_range()) {
      set_max_range(from.max_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepthMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthMap::CopyFrom(const DepthMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void DepthMap::Swap(DepthMap* other) {
  if (other != this) {
    std::swap(source_serial_, other->source_serial_);
    std::swap(tick_, other->tick_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(max_range_, other->max_range_);
    depths_.Swap(&other->depths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepthMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthMap_descriptor_;
  metadata.reflection = DepthMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemoteKinect

// @@protoc_insertion_point(global_scope)
