// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/skeletonframe.proto

#ifndef PROTOBUF_protocol_2fskeletonframe_2eproto__INCLUDED
#define PROTOBUF_protocol_2fskeletonframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol/skeleton.pb.h"
// @@protoc_insertion_point(includes)

namespace RemoteKinect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fskeletonframe_2eproto();
void protobuf_AssignDesc_protocol_2fskeletonframe_2eproto();
void protobuf_ShutdownFile_protocol_2fskeletonframe_2eproto();

class SkeletonFrame;

// ===================================================================

class SkeletonFrame : public ::google::protobuf::Message {
 public:
  SkeletonFrame();
  virtual ~SkeletonFrame();
  
  SkeletonFrame(const SkeletonFrame& from);
  
  inline SkeletonFrame& operator=(const SkeletonFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkeletonFrame& default_instance();
  
  void Swap(SkeletonFrame* other);
  
  // implements Message ----------------------------------------------
  
  SkeletonFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkeletonFrame& from);
  void MergeFrom(const SkeletonFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string source_serial = 1;
  inline bool has_source_serial() const;
  inline void clear_source_serial();
  static const int kSourceSerialFieldNumber = 1;
  inline const ::std::string& source_serial() const;
  inline void set_source_serial(const ::std::string& value);
  inline void set_source_serial(const char* value);
  inline void set_source_serial(const char* value, size_t size);
  inline ::std::string* mutable_source_serial();
  inline ::std::string* release_source_serial();
  
  // required uint32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);
  
  // repeated .RemoteKinect.Skeleton skeletons = 3;
  inline int skeletons_size() const;
  inline void clear_skeletons();
  static const int kSkeletonsFieldNumber = 3;
  inline const ::RemoteKinect::Skeleton& skeletons(int index) const;
  inline ::RemoteKinect::Skeleton* mutable_skeletons(int index);
  inline ::RemoteKinect::Skeleton* add_skeletons();
  inline const ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Skeleton >&
      skeletons() const;
  inline ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Skeleton >*
      mutable_skeletons();
  
  // @@protoc_insertion_point(class_scope:RemoteKinect.SkeletonFrame)
 private:
  inline void set_has_source_serial();
  inline void clear_has_source_serial();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* source_serial_;
  ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Skeleton > skeletons_;
  ::google::protobuf::uint32 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2fskeletonframe_2eproto();
  friend void protobuf_AssignDesc_protocol_2fskeletonframe_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fskeletonframe_2eproto();
  
  void InitAsDefaultInstance();
  static SkeletonFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// SkeletonFrame

// required string source_serial = 1;
inline bool SkeletonFrame::has_source_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkeletonFrame::set_has_source_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkeletonFrame::clear_has_source_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkeletonFrame::clear_source_serial() {
  if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
    source_serial_->clear();
  }
  clear_has_source_serial();
}
inline const ::std::string& SkeletonFrame::source_serial() const {
  return *source_serial_;
}
inline void SkeletonFrame::set_source_serial(const ::std::string& value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void SkeletonFrame::set_source_serial(const char* value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void SkeletonFrame::set_source_serial(const char* value, size_t size) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkeletonFrame::mutable_source_serial() {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  return source_serial_;
}
inline ::std::string* SkeletonFrame::release_source_serial() {
  clear_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_serial_;
    source_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 tick = 2;
inline bool SkeletonFrame::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkeletonFrame::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkeletonFrame::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkeletonFrame::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 SkeletonFrame::tick() const {
  return tick_;
}
inline void SkeletonFrame::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// repeated .RemoteKinect.Skeleton skeletons = 3;
inline int SkeletonFrame::skeletons_size() const {
  return skeletons_.size();
}
inline void SkeletonFrame::clear_skeletons() {
  skeletons_.Clear();
}
inline const ::RemoteKinect::Skeleton& SkeletonFrame::skeletons(int index) const {
  return skeletons_.Get(index);
}
inline ::RemoteKinect::Skeleton* SkeletonFrame::mutable_skeletons(int index) {
  return skeletons_.Mutable(index);
}
inline ::RemoteKinect::Skeleton* SkeletonFrame::add_skeletons() {
  return skeletons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Skeleton >&
SkeletonFrame::skeletons() const {
  return skeletons_;
}
inline ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Skeleton >*
SkeletonFrame::mutable_skeletons() {
  return &skeletons_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemoteKinect

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fskeletonframe_2eproto__INCLUDED
