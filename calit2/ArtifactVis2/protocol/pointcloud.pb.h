// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/pointcloud.proto

#ifndef PROTOBUF_protocol_2fpointcloud_2eproto__INCLUDED
#define PROTOBUF_protocol_2fpointcloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace RemoteKinect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fpointcloud_2eproto();
void protobuf_AssignDesc_protocol_2fpointcloud_2eproto();
void protobuf_ShutdownFile_protocol_2fpointcloud_2eproto();

class Point;
class PointCloud;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();
  
  Point(const Point& from);
  
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();
  
  void Swap(Point* other);
  
  // implements Message ----------------------------------------------
  
  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // optional uint32 r = 4;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 4;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);
  
  // optional uint32 g = 5;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 5;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);
  
  // optional uint32 b = 6;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 6;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RemoteKinect.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2fpointcloud_2eproto();
  friend void protobuf_AssignDesc_protocol_2fpointcloud_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fpointcloud_2eproto();
  
  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message {
 public:
  PointCloud();
  virtual ~PointCloud();
  
  PointCloud(const PointCloud& from);
  
  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();
  
  void Swap(PointCloud* other);
  
  // implements Message ----------------------------------------------
  
  PointCloud* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string source_serial = 1;
  inline bool has_source_serial() const;
  inline void clear_source_serial();
  static const int kSourceSerialFieldNumber = 1;
  inline const ::std::string& source_serial() const;
  inline void set_source_serial(const ::std::string& value);
  inline void set_source_serial(const char* value);
  inline void set_source_serial(const char* value, size_t size);
  inline ::std::string* mutable_source_serial();
  inline ::std::string* release_source_serial();
  
  // required uint32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);
  
  // repeated .RemoteKinect.Point points = 3;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline const ::RemoteKinect::Point& points(int index) const;
  inline ::RemoteKinect::Point* mutable_points(int index);
  inline ::RemoteKinect::Point* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Point >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Point >*
      mutable_points();
  
  // @@protoc_insertion_point(class_scope:RemoteKinect.PointCloud)
 private:
  inline void set_has_source_serial();
  inline void clear_has_source_serial();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* source_serial_;
  ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Point > points_;
  ::google::protobuf::uint32 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2fpointcloud_2eproto();
  friend void protobuf_AssignDesc_protocol_2fpointcloud_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fpointcloud_2eproto();
  
  void InitAsDefaultInstance();
  static PointCloud* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point::z() const {
  return z_;
}
inline void Point::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional uint32 r = 4;
inline bool Point::has_r() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_r() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_r() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 Point::r() const {
  return r_;
}
inline void Point::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
}

// optional uint32 g = 5;
inline bool Point::has_g() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_g() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_g() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 Point::g() const {
  return g_;
}
inline void Point::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
}

// optional uint32 b = 6;
inline bool Point::has_b() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Point::set_has_b() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Point::clear_has_b() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Point::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 Point::b() const {
  return b_;
}
inline void Point::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// PointCloud

// required string source_serial = 1;
inline bool PointCloud::has_source_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloud::set_has_source_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloud::clear_has_source_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloud::clear_source_serial() {
  if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
    source_serial_->clear();
  }
  clear_has_source_serial();
}
inline const ::std::string& PointCloud::source_serial() const {
  return *source_serial_;
}
inline void PointCloud::set_source_serial(const ::std::string& value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void PointCloud::set_source_serial(const char* value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void PointCloud::set_source_serial(const char* value, size_t size) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PointCloud::mutable_source_serial() {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  return source_serial_;
}
inline ::std::string* PointCloud::release_source_serial() {
  clear_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_serial_;
    source_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 tick = 2;
inline bool PointCloud::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointCloud::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointCloud::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointCloud::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 PointCloud::tick() const {
  return tick_;
}
inline void PointCloud::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// repeated .RemoteKinect.Point points = 3;
inline int PointCloud::points_size() const {
  return points_.size();
}
inline void PointCloud::clear_points() {
  points_.Clear();
}
inline const ::RemoteKinect::Point& PointCloud::points(int index) const {
  return points_.Get(index);
}
inline ::RemoteKinect::Point* PointCloud::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::RemoteKinect::Point* PointCloud::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Point >&
PointCloud::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::RemoteKinect::Point >*
PointCloud::mutable_points() {
  return &points_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemoteKinect

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fpointcloud_2eproto__INCLUDED
