// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/depthmap.proto

#ifndef PROTOBUF_protocol_2fdepthmap_2eproto__INCLUDED
#define PROTOBUF_protocol_2fdepthmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace RemoteKinect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2fdepthmap_2eproto();
void protobuf_AssignDesc_protocol_2fdepthmap_2eproto();
void protobuf_ShutdownFile_protocol_2fdepthmap_2eproto();

class DepthMap;

// ===================================================================

class DepthMap : public ::google::protobuf::Message {
 public:
  DepthMap();
  virtual ~DepthMap();
  
  DepthMap(const DepthMap& from);
  
  inline DepthMap& operator=(const DepthMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DepthMap& default_instance();
  
  void Swap(DepthMap* other);
  
  // implements Message ----------------------------------------------
  
  DepthMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepthMap& from);
  void MergeFrom(const DepthMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string source_serial = 1;
  inline bool has_source_serial() const;
  inline void clear_source_serial();
  static const int kSourceSerialFieldNumber = 1;
  inline const ::std::string& source_serial() const;
  inline void set_source_serial(const ::std::string& value);
  inline void set_source_serial(const char* value);
  inline void set_source_serial(const char* value, size_t size);
  inline ::std::string* mutable_source_serial();
  inline ::std::string* release_source_serial();
  
  // required uint32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);
  
  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // required int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // required int32 max_range = 5;
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 5;
  inline ::google::protobuf::int32 max_range() const;
  inline void set_max_range(::google::protobuf::int32 value);
  
  // repeated int32 depths = 6 [packed = true];
  inline int depths_size() const;
  inline void clear_depths();
  static const int kDepthsFieldNumber = 6;
  inline ::google::protobuf::int32 depths(int index) const;
  inline void set_depths(int index, ::google::protobuf::int32 value);
  inline void add_depths(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      depths() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_depths();
  
  // @@protoc_insertion_point(class_scope:RemoteKinect.DepthMap)
 private:
  inline void set_has_source_serial();
  inline void clear_has_source_serial();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_max_range();
  inline void clear_has_max_range();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* source_serial_;
  ::google::protobuf::uint32 tick_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 max_range_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > depths_;
  mutable int _depths_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2fdepthmap_2eproto();
  friend void protobuf_AssignDesc_protocol_2fdepthmap_2eproto();
  friend void protobuf_ShutdownFile_protocol_2fdepthmap_2eproto();
  
  void InitAsDefaultInstance();
  static DepthMap* default_instance_;
};
// ===================================================================


// ===================================================================

// DepthMap

// required string source_serial = 1;
inline bool DepthMap::has_source_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepthMap::set_has_source_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepthMap::clear_has_source_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepthMap::clear_source_serial() {
  if (source_serial_ != &::google::protobuf::internal::kEmptyString) {
    source_serial_->clear();
  }
  clear_has_source_serial();
}
inline const ::std::string& DepthMap::source_serial() const {
  return *source_serial_;
}
inline void DepthMap::set_source_serial(const ::std::string& value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void DepthMap::set_source_serial(const char* value) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(value);
}
inline void DepthMap::set_source_serial(const char* value, size_t size) {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  source_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepthMap::mutable_source_serial() {
  set_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    source_serial_ = new ::std::string;
  }
  return source_serial_;
}
inline ::std::string* DepthMap::release_source_serial() {
  clear_has_source_serial();
  if (source_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_serial_;
    source_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 tick = 2;
inline bool DepthMap::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepthMap::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepthMap::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepthMap::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 DepthMap::tick() const {
  return tick_;
}
inline void DepthMap::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// required int32 width = 3;
inline bool DepthMap::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepthMap::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepthMap::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepthMap::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 DepthMap::width() const {
  return width_;
}
inline void DepthMap::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 4;
inline bool DepthMap::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepthMap::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepthMap::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepthMap::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 DepthMap::height() const {
  return height_;
}
inline void DepthMap::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required int32 max_range = 5;
inline bool DepthMap::has_max_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepthMap::set_has_max_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepthMap::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepthMap::clear_max_range() {
  max_range_ = 0;
  clear_has_max_range();
}
inline ::google::protobuf::int32 DepthMap::max_range() const {
  return max_range_;
}
inline void DepthMap::set_max_range(::google::protobuf::int32 value) {
  set_has_max_range();
  max_range_ = value;
}

// repeated int32 depths = 6 [packed = true];
inline int DepthMap::depths_size() const {
  return depths_.size();
}
inline void DepthMap::clear_depths() {
  depths_.Clear();
}
inline ::google::protobuf::int32 DepthMap::depths(int index) const {
  return depths_.Get(index);
}
inline void DepthMap::set_depths(int index, ::google::protobuf::int32 value) {
  depths_.Set(index, value);
}
inline void DepthMap::add_depths(::google::protobuf::int32 value) {
  depths_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DepthMap::depths() const {
  return depths_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DepthMap::mutable_depths() {
  return &depths_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemoteKinect

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2fdepthmap_2eproto__INCLUDED
